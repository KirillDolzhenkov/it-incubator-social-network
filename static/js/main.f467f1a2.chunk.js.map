{"version":3,"sources":["сomponents/Dialogs/Dialogs.module.css","сomponents/Users/Users.module.css","сomponents/Profile/ContentArea/ContentArea.module.css","сomponents/Profile/ContentArea/Post/Post.module.css","сomponents/Profile/ProfileInfo/Profile.module.css","сomponents/Navbar/Navbar.module.css","reportWebVitals.ts","сomponents/Header/logo_transparent_03.png","сomponents/Header/logo_transparent_02.png","сomponents/Header/Header.tsx","сomponents/Navbar/Navbar.tsx","сomponents/News/News.tsx","сomponents/Music/Music.tsx","сomponents/Settings/Settings.tsx","сomponents/Dialogs/Messages/Messages.tsx","сomponents/Dialogs/DialogItems/DialogItems.tsx","redux/dialogs-reducer.ts","сomponents/Dialogs/DialogsContainer.tsx","сomponents/Dialogs/Dialogs.tsx","redux/users-reducer.ts","сomponents/Users/Users.tsx","сomponents/common/Preloader/preloaderLogo.png","сomponents/common/Preloader/Preloader.tsx","сomponents/Users/UsersСontainer.tsx","сomponents/Profile/ContentArea/Post/Post.tsx","redux/profile-reducer.ts","сomponents/Profile/ContentArea/ContentAreaContainer.tsx","сomponents/Profile/ContentArea/ContentArea.tsx","сomponents/Profile/ProfileInfo/ProfileInfo.tsx","сomponents/Profile/Profile.tsx","сomponents/Profile/ProfileContainer.tsx","App.tsx","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","props","className","src","Logo_01","Logo_02","Navbar","stylesModule","nav","item","to","activeClassName","active","News","Music","Settings","Messages","message","messageText","DialogItems","dialog","id","name","initialState","dialogs","messages","newMessageText","DialogsContainer","connect","state","dialogsPage","dispatch","updateNewMessageText","text","type","newDialogText","addMessage","dialogsElements","map","d","messagesElements","m","trim","dialogsItems","value","onChange","e","currentTarget","onKeyPress","key","preventDefault","placeholder","onClick","users","pageSize","totalUserCount","currentPage","isFetching","Users","pageCount","Math","ceil","usersPage","current","i","push","p","onPageGanged","selectedPage","slice","u","items","followed","unfollow","follow","status","Preloader","PreloaderLogo","alt","UsersContainer","toggleIsFetching","setCurrentPage","axios","get","response","setUsers","data","this","setTotalUsersCount","totalCount","React","Component","userId","pageValue","countValue","Post","styleModule","likesCount","posts","newPostText","profile","ContentAreaContainer","profilePage","updateNewPostText","addPost","postsElements","onAddPost","postBlock","ProfileInfo","descriptionBlock","photos","large","Profile","ProfileContainer","setUserProfile","App","path","render","rootReducer","combineReducers","action","body","sidebarPage","store","createStore","renderEntireTree","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f467f1a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3dxlX\",\"dialogsItems\":\"Dialogs_dialogsItems__3dCbY\",\"active\":\"Dialogs_active__1jlfK\",\"messages\":\"Dialogs_messages__2v1Zz\",\"message\":\"Dialogs_message__3NGPx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Users_selectedPage__1mZri\",\"items\":\"Users_items__302Bp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"ContentArea_postBlock__1FZxZ\",\"posts\":\"ContentArea_posts__2YdVD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"Post_items__7cdgf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"Profile_descriptionBlock__15JQ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__38ETH\",\"item\":\"Navbar_item__3vuXe\",\"active\":\"Navbar_active__pCbfH\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/logo_transparent_03.230df42a.png\";","export default __webpack_public_path__ + \"static/media/logo_transparent_02.7aafc755.png\";","import React from \"react\";\r\n/*import stylesModule from \"./Header.module.css\"*/\r\nimport Logo_01 from \"./logo_transparent_03.png\";\r\nimport Logo_02 from \"./logo_transparent_02.png\";\r\n\r\ntype HeaderPropsType = {}\r\n\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return (\r\n        <header className='header'>\r\n            <img src={Logo_01}/><img src={Logo_02}/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport {\r\n    Header\r\n}","import React from \"react\";\r\nimport stylesModule from \"./Navbar.module.css\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype NavbarPropsType = {}\r\n\r\nconst Navbar: React.FC<NavbarPropsType> = (props) => {\r\n    return (\r\n        <nav className={stylesModule.nav}>\r\n            <div className={stylesModule.item}>\r\n                <NavLink to='/profile' activeClassName={stylesModule.active} >Profile</NavLink>\r\n            </div>\r\n            <div className={stylesModule.item}>\r\n                <NavLink to='/dialogs' activeClassName={stylesModule.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={stylesModule.item}>\r\n                <NavLink to='/Users' activeClassName={stylesModule.active}>Users</NavLink>\r\n            </div>\r\n            <div className={stylesModule.item}>\r\n                <NavLink to='/news' activeClassName={stylesModule.active}>News</NavLink>\r\n            </div>\r\n            <div className={stylesModule.item}>\r\n                <NavLink to='/music' activeClassName={stylesModule.active}>Music</NavLink>\r\n            </div>\r\n            <div className={stylesModule.item}>\r\n                <NavLink to='/settings'activeClassName={stylesModule.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport {\r\n    Navbar\r\n}\r\n","import React from \"react\";\r\nimport stylesModule from \"./News.module.css\";\r\n\r\ntype NewsType = {}\r\n\r\nexport const News: React.FC<NewsType> = (props) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport stylesModule from \"./Music.module.css\";\r\n\r\ntype MusicPropsType = {}\r\n\r\nconst Music: React.FC<MusicPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Music\r\n}","import React from \"react\";\r\n/*import stylesModule from \"./Settings.module.css\"*/\r\n\r\ntype SettingsPropsType = {}\r\n\r\nconst Settings: React.FC<SettingsPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\nexport {\r\n    Settings\r\n}\r\n\r\n","import React from \"react\";\r\nimport stylesModule from \"./../Dialogs.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    messageText: string\r\n}\r\n\r\nconst Messages: React.FC<MessagePropsType> = (props) =>{\r\n    return (\r\n        <div className={stylesModule.message}>\r\n            {props.messageText}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Messages\r\n}","import React from \"react\";\r\nimport stylesModule from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItems: React.FC<DialogItemsType> = (props) => {\r\n    return (\r\n        <div className={stylesModule.dialog}>\r\n            <NavLink to = {'/dialogs/' + props.id} >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    DialogItems\r\n}","export type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type DialogsPageInitialStateType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addMessageAC> | ReturnType<typeof changeMessageAC>\r\n\r\nconst initialState: DialogsPageInitialStateType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dima\"},\r\n        {id: 2, name: \"Sasha\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"hello\"},\r\n        {id: 2, message: \"How are you?\"},\r\n    ],\r\n    newMessageText: \"\"\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageInitialStateType = initialState, action: ActionType): DialogsPageInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/ADD_MESSAGE\": {\r\n            let body = state.newMessageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 3, message: body}],\r\n                newMessageText: \"\"\r\n            }\r\n        }\r\n        case \"SN/DIALOGS/SET_NEW_MESSAGE_TEXT\":\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newDialogText\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const addMessageAC = (newMessageText: string) => {\r\n    return {type: \"SN/DIALOGS/ADD_MESSAGE\", newMessageText} as const;\r\n}\r\nexport const changeMessageAC = (newDialogText: string) => {\r\n    return {type: \"SN/DIALOGS/SET_NEW_MESSAGE_TEXT\", newDialogText} as const;\r\n}\r\n\r\nexport {\r\n    dialogsReducer\r\n}\r\n","import {Dialogs} from \"./Dialogs\";\r\nimport {addMessageAC, changeMessageAC, DialogsPageInitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n\r\n/*type DialogsContainerPropsType = {\r\n    store: StoreType\r\n}*/\r\n\r\n/*\r\nconst DialogsContainer: React.FC<DialogsContainerPropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {(store) => {\r\n                const state = store.getState().dialogsPage;\r\n\r\n                const addMessage = (text: string) => {\r\n                   store.dispatch(addMessageAC(text))\r\n                }\r\n                const onMessageChange = (text: string) => {\r\n                    store.dispatch(changeMessageAC(text))\r\n                }\r\n                return (\r\n                    <div>\r\n                        <Dialogs\r\n                            updateNewMessageText={onMessageChange}\r\n                            addMessage={addMessage}\r\n                            message={state.message}\r\n                            newMessageText={state.newMessageText}\r\n                            dialog={state.dialog}\r\n                        />\r\n                    </div>\r\n                )\r\n            }}\r\n        </StoreContext.Consumer>\r\n\r\n    )\r\n}*/\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: DialogsPageInitialStateType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateNewMessageText: (text: string)=> void\r\n    addMessage: (text: string)=> void\r\n}\r\n\r\nconst mapStateToProps =(state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps =(dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        updateNewMessageText: (text: string) =>{\r\n            dispatch(changeMessageAC(text))\r\n        },\r\n        addMessage: (text: string) =>{\r\n            dispatch(addMessageAC(text))\r\n        },\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport {\r\n    DialogsContainer\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport stylesModule from \"./Dialogs.module.css\";\r\nimport {Messages} from \"./Messages/Messages\"\r\nimport {DialogItems} from \"./DialogItems/DialogItems\";\r\n\r\nimport {DialogsPageInitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\n/*type DialogsPropsType = {\r\n    updateNewMessageText: (text: string) => void\r\n    addMessage: (text: string) => void\r\n    message: Array<MessageType>\r\n    newMessageText: string\r\n    dialog: Array<DialogType>\r\n}*/\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageText: (text: string) => void\r\n    addMessage: (text: string) => void\r\n    dialogsPage: DialogsPageInitialStateType\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map(d => <DialogItems key={d.id} id={d.id} name={d.name}/>)\r\n    let messagesElements = props.dialogsPage.messages\r\n        .map(m => <Messages key={m.id} messageText={m.message}/>)\r\n\r\n    const addMessage = () => {\r\n        if(props.dialogsPage.newMessageText){\r\n            props.addMessage(props.dialogsPage.newMessageText.trim())\r\n        }\r\n    }\r\n    let onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewMessageText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            addMessage();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={stylesModule.dialogs}>\r\n            <div className={stylesModule.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={stylesModule.messages}>\r\n                {messagesElements}\r\n                <hr/>\r\n                <div>\r\n                    <textarea value={props.dialogsPage.newMessageText}\r\n                              onChange={onChangeHandler}\r\n                              onKeyPress={onKeyPressHandler}\r\n                              placeholder=\"Write something\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Dialogs\r\n}","//types:\r\ntype locationType = {\r\n    city: string\r\n    country: string\r\n}\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: locationType\r\n}\r\n\r\nexport type usersPageInitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\ntype ActionType = ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n\r\nconst initialState: usersPageInitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false\r\n}\r\n\r\nconst usersReducer = (\r\n    state: usersPageInitialStateType = initialState, action: ActionType): usersPageInitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\":{\r\n            return {...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/UNFOLLOW\":{\r\n            return {...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n        case \"SN/USERS/SET_USERS\":{\r\n            return {...state, users: [ ...action.users]}\r\n        }\r\n        case \"SN/USERS/SET_CURRENT_PAGE\":{\r\n            return {...state, currentPage: action.pageValue}\r\n        }\r\n        case \"SN/USERS/SET_TOTAL_USERS_COUNT\": {\r\n            return { ...state, totalUserCount: action.countValue}\r\n        }\r\n        case \"SN/USERS/TOGGLE_IS_FETCHING\": {\r\n            return { ...state, isFetching: action.isFetching}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creators:\r\nexport const follow = (userId: number) => {\r\n    return {type: \"SN/USERS/FOLLOW\", userId} as const;\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return {type: \"SN/USERS/UNFOLLOW\", userId} as const;\r\n}\r\nexport const setUsers = (users: Array<UsersType>) => {\r\n    return {type: \"SN/USERS/SET_USERS\", users} as const;\r\n}\r\nexport const setCurrentPage = (pageValue: number) => {\r\n    return { type: \"SN/USERS/SET_CURRENT_PAGE\", pageValue} as const;\r\n}\r\nexport const setTotalUsersCount = (countValue: number) => {\r\n    return {type: \"SN/USERS/SET_TOTAL_USERS_COUNT\", countValue}  as const;\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean)=> {\r\n    return {type: \"SN/USERS/TOGGLE_IS_FETCHING\", isFetching} as const;\r\n}\r\n\r\nexport {\r\n    usersReducer\r\n}\r\n\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {usersPageInitialStateType, UsersType} from \"../../redux/users-reducer\";\r\nimport stylesModule from \"./Users.module.css\"\r\n\r\ntype onPageChangedType = {\r\n    onPageGanged: (page: number) => void\r\n}\r\n\r\nexport type UsersPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    usersPage: usersPageInitialStateType\r\n    setCurrentPage: (pageValue: number) => void\r\n    setTotalUsersCount: (countValue: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\n\r\nconst Users: React.FC<UsersPropsType & onPageChangedType> = (props) => {\r\n\r\n\r\n    let pageCount = Math.ceil(props.usersPage.totalUserCount / props.usersPage.pageSize);\r\n    let current = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        current.push(i)\r\n    }\r\n\r\n    let startValue = 0; //need to create state\r\n    let endValue = 7; //need to create state\r\n\r\n    return <div>\r\n        <button >{'« prev'}</button>\r\n        {\r\n            current.map(p =>  {\r\n\r\n                return <span\r\n                    onClick={() => {\r\n                        props.onPageGanged(p)\r\n                    }}\r\n                    className={p === props.usersPage.currentPage ? stylesModule.selectedPage : ''}> | {p} | </span>\r\n            }).slice(startValue, endValue)  //slice !!!!!!\r\n        }\r\n\r\n        <button>{'next  »'}</button>\r\n        {\r\n            props.usersPage.users.map(u => <div key={u.id}>\r\n\r\n                <NavLink to={\"/profile/\" + u.id}>\r\n                    <div className={stylesModule.items}>\r\n                        <img src={\"https://cdn4.iconfinder.com/data/icons/spring-festival/512/man-512.png\"}/>\r\n                    </div>\r\n                    {/*<div>\r\n                        <img src={u.photos.small !== null\r\n                            ? u.photos.small\r\n                            : usersPhoto\r\n                        }\r\n                             alt={\"Photo\"} className={styles.usersPhoto}/>\r\n                    </div>*/}\r\n                </NavLink>\r\n\r\n                <div>\r\n                    {u.followed\r\n                        ?\r\n                        <button onClick={() => {\r\n                            props.unfollow(u.id)\r\n                        }}>unfollow</button>\r\n                        :\r\n                        <button onClick={() => {\r\n                            props.follow(u.id)\r\n                        }}>follow</button>\r\n                    }\r\n                </div>\r\n                <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                <hr/>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport {\r\n    Users\r\n}","export default __webpack_public_path__ + \"static/media/preloaderLogo.400bb8f2.png\";","import React from \"react\";\r\nimport \"./Preloader.css\"\r\nimport PreloaderLogo from \"./preloaderLogo.png\"\r\n\r\ntype PreloaderPropsType = {\r\n}\r\n\r\nconst Preloader: React.FC<PreloaderPropsType> = (props) => {\r\n    return (\r\n        <div className=\"Preloader\">\r\n            <header className=\"Preloader-header\">\r\n                <img src={PreloaderLogo} className=\"Preloader-logo\" alt=\"logo\"/>\r\n                {/*loading...*/}\r\n                <br/>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Preloader\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    usersPageInitialStateType,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport PreloaderLogo from \"../common/Preloader/preloaderLogo.png\";\r\n\r\n//types:\r\ntype mapStateToPropsType = {\r\n    usersPage: usersPageInitialStateType\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersType>) => void\r\n    setCurrentPage: (pageValue: number) => void\r\n    setTotalUsersCount: (countValue: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\ntype UsersContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        usersPage: state.usersPage,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUserCount: state.usersPage.totalUserCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n    }\r\n}\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${\r\n            this.props.usersPage.currentPage}&count=${\r\n            this.props.usersPage.pageSize}`)\r\n            .then(response => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageGanged = (p: number) => {\r\n        this.props.toggleIsFetching(true);\r\n        this.props.setCurrentPage(p);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${\r\n            this.props.usersPage.pageSize}`)\r\n            .then(response => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {/*{this.props.isFetching\r\n                    ? <Preloader/>\r\n                    : null}*/}\r\n                {this.props.isFetching\r\n                    ? <Preloader/>\r\n                    : <Users\r\n                        follow={this.props.follow}\r\n                        unfollow={this.props.unfollow}\r\n                        setUsers={this.props.setUsers}\r\n                        usersPage={this.props.usersPage}\r\n                        setCurrentPage={this.props.setCurrentPage}\r\n                        setTotalUsersCount={this.props.setTotalUsersCount}\r\n                        onPageGanged={this.onPageGanged}\r\n                        toggleIsFetching={this.props.toggleIsFetching}\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n        follow\r\n        ,\r\n        unfollow\r\n        ,\r\n        setUsers\r\n        ,\r\n        setCurrentPage\r\n        ,\r\n        setTotalUsersCount\r\n        ,\r\n        toggleIsFetching\r\n        ,\r\n    }\r\n)(UsersContainer);","import React from \"react\";\r\nimport styleModule from \"./Post.module.css\";\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={styleModule.items}>\r\n            <img src='https://cdn4.iconfinder.com/data/icons/spring-festival/512/man-512.png'/>\r\n            <span>{props.message}</span><br/>\r\n            <span>♥{props.likesCount}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    Post\r\n}\r\n","//types:\r\nexport type PostsType = {\r\n    id: number\r\n    messages: string\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    profile: ProfileType | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: ConstantsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: null | string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type ConstantsType = {\r\n    facebook: null | string,\r\n    website: null | string,\r\n    vk: null | string,\r\n    twitter: null | string,\r\n    instagram: null | string,\r\n    youtube: null | string,\r\n    github: null | string,\r\n    mainLink: null | string\r\n}\r\n\r\nexport type PhotosType = { small: string, large: string }\r\n\r\ntype ActionType = ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof changePostAC>\r\n    | ReturnType<typeof setUserProfile>\r\n\r\nconst initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, messages: 'Hello', likesCount: 12},\r\n        {id: 2, messages: 'Wats up', likesCount: 13},\r\n    ],\r\n    newPostText: \"\",\r\n    profile: null\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD_POST\": {\r\n            let body = state.newPostText;\r\n            return {\r\n                ...state,\r\n                posts: [{id: 3, messages: body, likesCount: 0}, ...state.posts],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case \"SN/PROFILE/CHANGE_POST\": {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newPostText\r\n            }\r\n        }\r\n        case \"SN/PROFILE/SET_NEW_POST_TEXT\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creators:\r\nexport const addPostAC = (newPostText: string) => {\r\n    return ({type: \"SN/PROFILE/ADD_POST\", newPostText} as const);\r\n}\r\nexport const changePostAC = (newPostText: string) => {\r\n    return ({type: \"SN/PROFILE/CHANGE_POST\", newPostText} as const);\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return ({type: \"SN/PROFILE/SET_NEW_POST_TEXT\", profile} as const);\r\n}\r\n\r\n\r\nexport {\r\n    profileReducer\r\n}\r\n\r\n","import {ContentArea} from \"./ContentArea\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPostAC, changePostAC, ProfilePageType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//types:\r\ntype  mapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType =>{\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateNewPostText: (text: string)=> void\r\n    addPost: (text: string)=> void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType =>{\r\n    return {\r\n        updateNewPostText: (text: string)=>{\r\n            dispatch(changePostAC(text))\r\n        },\r\n        addPost: (text: string)=>{\r\n            dispatch(addPostAC(text))\r\n        },\r\n    }\r\n}\r\n\r\nconst ContentAreaContainer = connect(mapStateToProps, mapDispatchToProps)(ContentArea);\r\n\r\nexport {\r\n    ContentAreaContainer\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {Post} from \"./Post/Post\";\r\nimport stylesModule from \"./ContentArea.module.css\";\r\nimport {ProfilePageType} from \"../../../redux/profile-reducer\";\r\n\r\ntype ContentAreaPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: (text: string) => void\r\n    profilePage: ProfilePageType\r\n}\r\n\r\nconst ContentArea: React.FC<ContentAreaPropsType> = (props) => {\r\n\r\n    let postsElements = props.profilePage.posts\r\n        .map(p => <Post key={p.id} message={p.messages} likesCount={p.likesCount}/>);\r\n\r\n    const onAddPost = () => {\r\n        if(props.profilePage.newPostText){\r\n            props.addPost(props.profilePage.newPostText.trim());\r\n        }\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value);\r\n    }\r\n\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            onAddPost();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={stylesModule.postBlock}>\r\n            <h3>My posts</h3>\r\n            <hr/>\r\n            <div>\r\n                <textarea\r\n                    value={props.profilePage.newPostText}\r\n                    onChange={onPostChange}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    placeholder=\"Write something\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button onClick={onAddPost}>Send</button>\r\n            </div>\r\n            <div className={stylesModule.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    ContentArea\r\n}\r\n","import React from \"react\";\r\nimport stylesModule from \"./Profile.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*{props.profile ? <Preloader/> : null}*/}\r\n            <div>\r\n                <img src=\"https://i.redd.it/om4a8r7glhx21.png\"/>\r\n            </div>\r\n            <div className={stylesModule.descriptionBlock}>\r\n\r\n                {/*<img src={props.profile && props.profile.photos ? props.profile.photos.large: ''}/>*/}\r\n                <img src={props.profile?.photos.large}/>\r\n\r\n                avatar+description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {ContentAreaContainer} from \"./ContentArea/ContentAreaContainer\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n}\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n    /*    if (props.profile){\r\n            return <Preloader />\r\n        }*/\r\n    return (\r\n\r\n        <div>\r\n            {/*{!props.profile ? <Preloader/> :\r\n                <div>\r\n                    <ProfileInfo profile={props.profile}/>\r\n                    <ContentAreaContainer/>\r\n                </div>\r\n            }*/}\r\n            <ProfileInfo profile={props.profile}/>\r\n            <ContentAreaContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport\r\n{\r\n    Profile\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType, setUserProfile} from \"../../redux/profile-reducer\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {Users} from \"../Users/Users\";\r\n\r\n//types:\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n    setUserProfile: (profile: ProfileType) => void\r\n}\r\ntype ProfileContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/2`)\r\n            .then(response => {\r\n                this.props.setUserProfile(response.data.items);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.props.profile\r\n                    ? <Preloader/>\r\n                    : <Profile {...this.props} profile={this.props.profile}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType)  => {\r\n    return{\r\n        profile: state.profilePage.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {setUserProfile})(ProfileContainer);\r\n","import React from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport './App.css';\r\nimport {Header} from \"./сomponents/Header/Header\";\r\nimport {Navbar} from \"./сomponents/Navbar/Navbar\";\r\nimport {News} from \"./сomponents/News/News\";\r\nimport {Music} from \"./сomponents/Music/Music\";\r\nimport {Settings} from \"./сomponents/Settings/Settings\";\r\nimport {DialogsContainer} from \"./сomponents/Dialogs/DialogsContainer\"\r\n\r\nimport UsersContainer from \"./сomponents/Users/UsersСontainer\";\r\nimport ProfileContainer from \"./сomponents/Profile/ProfileContainer\";\r\n\r\n\r\ntype AppPropsType = {\r\n\r\n}\r\n\r\nconst App: React.FC<AppPropsType> = (props) => {\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <Header/>\r\n            <Navbar/>\r\n            <div className=\"app-wrapper-content\">\r\n                <Route path=\"/profile\"\r\n                       render={() => <ProfileContainer/>}/>\r\n                <Route path=\"/dialogs\"\r\n                       render={() => <DialogsContainer/>}/>\r\n                <Route path=\"/users\"\r\n                       render={() => <UsersContainer/>}/>\r\n                <Route path=\"/news\" render={() => <News/>}/>\r\n                <Route path=\"/music\" render={() => <Music/>}/>\r\n                <Route path=\"/settings\" render={() => <Settings/>}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {\r\n    App\r\n}\r\n\r\n","export type SidebarPageType = {}\r\n\r\n/*type ActionType = any*/\r\n\r\nconst initialState = {}\r\n\r\nconst sidebarReducer = (state: SidebarPageType = initialState): SidebarPageType => { //need to return action & ActionType\r\n    return state;\r\n}\r\n\r\nexport {\r\n    sidebarReducer\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebarPage: sidebarReducer,\r\n    usersPage: usersReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nexport type RootReduxStoreType = typeof store\r\n\r\n\r\nexport {\r\n    store\r\n}\r\n","import React from \"react\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport {App} from \"./App\";\r\nimport {store} from \"./redux/redux-store\"\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n/*import {Provider} from \"./StoreContext\";*/\r\n\r\n\r\nlet renderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <BrowserRouter>\r\n                <Provider store={store}>\r\n                    <App/>\r\n                </Provider>\r\n            </BrowserRouter>\r\n        </React.StrictMode>,\r\n        document.getElementById(\"root\")\r\n    );\r\n}\r\n\r\nrenderEntireTree();\r\n/*store.subscribe(renderEntireTree);*/\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nexport {\r\n    renderEntireTree\r\n}\r\n"],"sourceRoot":""}